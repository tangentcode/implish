#+title: implish tests
#+server: https://tangentcode.com/
#+name: implish

* DONE repl behavior: print everything but nil
#+name: nil
#+begin_src
> [nil]
[nil]
> nil
> 1 `x
`x
#+end_src

* DONE echo "hello"
#+name: hello
#+begin_src
> echo "hello"
hello
#+end_src

* DONE echo 2 + 2
#+name: add
#+begin_src
> echo 2 + 2
4
#+end_src

outputing "2 2" would be reasonable here if you don't look ahead for operators. So this test forces you to define operators, and look ahead multiple tokens.

- next -> echo (verb)
- have verb, so look ahead for adverb/conjunction/
- peek -> 2 (noun)
- okay. we will apply verb to noun
- fetch full noun phrase, by calling "next"
- next -> 2 (noun)
- have noun, so look ahead for .method or infix op


* DONE arithmetic (left to right eval)
#+name: arithmetic
#+begin_src
> echo 1 + 2 * 3 + 5
14
#+end_src

* DONE ignore comments
#+name: echo-comment
#+begin_src
> echo .: this is a comment :. "hi"
hi
#+end_src

* DONE echo show "quoted"
#+name: echo-show
#+begin_src
> echo show "quoted"
"quoted"
#+end_src

* TODO strands
#+name: strands
#+begin_src
> 1 2 3 4
1 2 3 4
#+end_src


* TODO vector math
#+name: strand-math
#+begin_src
> 1 + ! 4
1 2 3 4
> 1 + 1 2 3 4
2 3 4 5
#+end_src


* [0/7] upcoming tests

** TODO ambivalent operators
ex: - x is negate,  x - y is subtraction
x + y is addition,  + x is transpose or complex conjugate

** TODO grammar rules / definitions / macros

** TODO binary expressions
: eq =  ne ~: gt >  lt <  ge >: le <:
: xr ~: an *. or +. nt -.
: lid / rid ? (li/ri?)

** TODO proofs
- unification for rewrite rules
- hehner has two levels (one for expr, one for proofs)
- really just same op with two precedence levels
- quoting might fill the gap?

** TODO tokenizer -> xml test?
